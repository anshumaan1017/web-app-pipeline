name: Aqua-Scan

on: 
  pull_request:
  push:
    branches:
      - main

jobs:
  aqua-misconfiguration-scan:
    name: Aqua scanner
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read
      security-events: write 

    steps: 
        
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Run Aqua scanner for JSON
      #   uses: docker://aquasec/aqua-scanner
      #   with:
      #     args: trivy fs --format json --output aqua-sscs-results.json --scanners config,vuln,secret --sast --reachability --package-json . 
      #     # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      #     # To enable SAST scanning, add: --sast
      #     # To enable reachability scanning, add: --reachability
      #     # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
      #   env:
      #     AQUA_KEY: ${{ secrets.AQUA_KEY }}
      #     AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
      #     GITHUB_TOKEN: ${{ secrets.GHCR_TOKEN }}
      #     AQUA_URL: https://api.asia-1.supply-chain.cloud.aquasec.com
      #     CSPM_URL: https://asia-1.api.cloudsploit.com
      #     TRIVY_RUN_AS_PLUGIN: 'aqua'
      #     # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)

      # - name: Upload JSON scan results 
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: aqua-sast-results-json
      #     path: aqua-sscs-results.json

      - name: Download HTML template for Aqua Trivy
        run: |
          mkdir -p contrib
          curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o contrib/html.tpl


      - name: Run Aqua scanner for Misconfigurations in Code
        uses: docker://aquasec/aqua-scanner
        with:
          #args: trivy fs --format json --output aqua-scan-results.json --scanners config,vuln,secret --sast --reachability --package-json . 
          args: trivy fs \
              --format template \
              --template "@contrib/html.tpl" \
              --output aqua-report-scan.html \
              --scanners misconfig,vuln,secret \
              --sast \
              --reachability .

          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable reachability scanning, add: --reachability
          # To enable npm/dotnet/gradle non-lock file scanning, add: --package-json / --dotnet-proj / --gradle
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          GITHUB_TOKEN: ${{ secrets.GHPR_TOKEN}}
          AQUA_URL: https://api.asia-1.supply-chain.cloud.aquasec.com
          CSPM_URL: https://asia-1.api.cloudsploit.com
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          # For http/https proxy configuration add env vars: HTTP_PROXY/HTTPS_PROXY, CA-CRET (path to CA certificate)

      - name: Upload HTML scan results
        if: ${{ always() }} # necessary if using failure thresholds in the image scan
        uses: actions/upload-artifact@v4
        with:
          name: aqua-report-scan-results
          path: aqua-report-scan.html


  docker-build-scan: 
    name: Docker Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read 
      id-token: write
      packages: write
      actions: read
      security-events: write

   #needs: [aqua-misconfiguration-scan]
    env:
      DOCKER_REPOSITORY: ${{ secrets.DOCKERHUB_USERNAME }} # name of Docker Hub Org ID
      IMAGE_NAME: web-app-pipeline
      IMAGE_TAG: ${{ github.run_number }} 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: pip install beautifulsoup4

      # - name: Pipeline Enforcer
      #   uses: aquasecurity/pipeline-enforcer-action@v1.0.0
      #   with:
      #     aqua-key: ${{ secrets.AQUA_KEY }}
      #     aqua-secret: ${{ secrets.AQUA_SECRET }}
      #     access-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}

      - name: Run Trivy vulnerability scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
            image-ref: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}
            format: 'sarif'
            output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
            sarif_file: 'trivy-results.sarif'

      - name: Prisma Cloud image scan - nonprod
        uses: PaloAltoNetworks/prisma-cloud-scan@v1.6.4
        with:
          pcc_console_url: https://asia-south1.cloud.twistlock.com/india-1131963775
          pcc_user: ${{ secrets.pcc_user }}
          pcc_pass: ${{ secrets.pcc_pass }}
          image_name: ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}} 

      - name: Login to Aqua Registry
        uses: docker/login-action@v3
        with: 
          registry: registry.aquasec.com
          username: ${{ secrets.AQUA_REGISTRY_USERNAME }}
          password: ${{ secrets.AQUA_REGISTRY_PASS }}
          
      - name: Image Scan with Aqua SaaS Scanner 
        run: |  
            docker run -e BUILD_JOB_NAME=${{ env.IMAGE_NAME}} \
            --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/scan-output \
            registry.aquasec.com/scanner:2502.7.14 scan \
            --host ${{ secrets.AQUA_HOST }} \
            --token ${{ secrets.AQUA_TOKEN }} \
            --local ${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --sariffile /scan-output/image-results.sarif \
            --htmlfile /artifacts/aqua-scan.html \
            --jsonfile /artifacts/aqua-scan.json \
            --layer-vulnerabilities

      - name: Upload Aqua Reports as Artifacts
        if: always()  # Ensures this step runs even if previous steps fails
        uses: actions/upload-artifact@v4
        with:
            name: aqua-reports
            path: artifacts/

      - name: Filter ignored Aqua CVEs
        if: always()
        run: |
            mkdir -p ci_scripts
            cat > ci_scripts/ignored_cves_config.json << 'EOL'
            {
            "ignored_cves": [
                "CVE-2025-27789",
                "CVE-2024-45590"
            ],
            "comment": "These CVEs have been marked as ignored in the Aqua UI"
            }
            EOL

            python3 ci_scripts/filter_aqua_reports.py \
            --input-dir . \
            --output-dir filtered-artifacts \
            --ignored-cves CVE-2025-27789 CVE-2024-45590

            echo "=== FILTERED OUTPUT DEBUG INFO ==="
            ls -la filtered-artifacts/
            grep -c "CVE-2025-27789\|CVE-2024-45590" filtered-artifacts/aqua-scan-filtered.json || echo "No ignored CVEs found in JSON"
            grep -c "CVE-2025-27789\|CVE-2024-45590" filtered-artifacts/aqua-scan-filtered.html || echo "No ignored CVEs found in HTML"

      - name: Generate Elegant HTML Report
        run: |
            python3 ci_scripts/create_elegant_report.py \
            filtered-artifacts/aqua-scan-filtered.json \
            filtered-artifacts/elegant-report.html


      - name: Upload Filtered Aqua Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
                name: aqua-filtered-reports
                path: filtered-artifacts/

      - name: Upload SARIF report
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
                sarif_file: image-results.sarif

      - name: Upload HTML report
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
            name: aqua-image-scan-results
            path: image-results.html

      - name: Manifest Generation
        run: |
          export BILLY_SERVER=https://billy.asia-1.codesec.aquasec.com
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | sha256sum --check; then
          echo "install.sh checksum failed"
          exit 1
          fi
          BINDIR="." sh install.sh
          rm install.sh install.sh.checksum
          ./billy generate \
            --access-token "${{ secrets.GHCR_TOKEN }}" \
            --aqua-key "${{ secrets.AQUA_KEY }}" \
            --aqua-secret "${{ secrets.AQUA_SECRET }}" \
            --cspm-url https://asia-1.api.cloudsploit.com \
            --artifact-path "${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}" 

            # The docker image name:tag of the newly built image
            # --artifact-path "my-image-name:${{ env.tag-version }}" 
            # OR the path to the root folder of your project. I.e my-repo/my-app 
            # --artifact-path "${{env.MY_APP_ROOT}}"
            # --artifact-path "${{ env.DOCKER_REPOSITORY}}/${{ env.IMAGE_NAME}}:${{ env.IMAGE_TAG}}"